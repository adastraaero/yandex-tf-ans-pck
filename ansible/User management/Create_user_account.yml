---
# Плейбук для создания пользователя с безопасным паролем и генерацией SSH-ключей.
# Хэширование пароля происходит на Ansible Controller, поэтому passlib должен быть установлен локально.

- name: User management playbook
  hosts: all
  become: true  # Требуется запуск от имени root или пользователя с правами суперпользователя
  vars:
    username: example2  # Имя пользователя, которого нужно создать
    user_password: password
    user_home: "/home/{{ username }}"  # Домашняя директория пользователя
    user_comment: "Managed by Ansible"  # Комментарий для пользователя
    ssh_key_comment: "Generated by Ansible"  # Комментарий для SSH-ключа
    password_salt: "mysecretsalt"  # Соль для хэширования пароля

  pre_tasks:
    - name: Ensure passlib is installed on the Ansible Controller  # Проверяем установку passlib на локальной машине
      local_action: command pip3 show passlib  # Выполняем локальную команду для проверки passlib
      ignore_errors: true  # Игнорируем ошибки, если passlib не установлен
      register: passlib_check

    - name: Install passlib on the Ansible Controller if not present
      local_action: command pip3 install passlib  # Устанавливаем passlib локально, если он отсутствует
      when: passlib_check.rc != 0  # Выполняем установку, если passlib не был найден

  tasks:
    - name: Check if user exists  # Проверка, существует ли пользователь
      command: "id -u {{ username }}"  # Используем команду `id -u`, которая возвращает UID пользователя, если он существует
      register: user_check  # Регистрируем результат выполнения команды
      ignore_errors: true  # Игнорируем ошибки, если пользователь не найден

    - name: Create user if it does not exist  # Создаем пользователя, если он не существует
      user:
        name: "{{ username }}"  # Имя пользователя
        password: "{{ user_password | password_hash('sha512', password_salt) }}"  # Хэшируем пароль с использованием соли
        groups: 
          - wheel  # Добавляем пользователя в группу wheel для административных привилегий
        state: present  # Убеждаемся, что пользователь существует (создаем, если его нет)
        shell: "/bin/bash"  # Устанавливаем оболочку по умолчанию
        system: false  # Пользователь не является системным
        create_home: true  # Создаем домашнюю директорию, если она не существует
        home: "{{ user_home }}"  # Указываем домашнюю директорию
        comment: "{{ user_comment }}"  # Добавляем комментарий к учетной записи
        generate_ssh_key: true  # Генерируем SSH-ключи для пользователя
        ssh_key_comment: "{{ ssh_key_comment }}"  # Комментарий к SSH-ключам
      when: user_check.rc != 0  # Выполняем задачу, если команда `id -u` вернула ненулевой код (пользователь не существует)

    - name: Log user creation  # Логируем успешное создание пользователя
      debug:
        msg: "User {{ username }} created with home directory {{ user_home }}"
      when: user_check.rc != 0  # Логируем только при создании пользователя

    - name: Notify user already exists  # Логируем информацию, если пользователь уже существует
      debug:
        msg: "User {{ username }} already exists."
      when: user_check.rc == 0  # Выполняем только если пользователь уже был найден

  handlers:
    - name: Notify user creation  # Уведомление об успешном создании пользователя
      debug:
        msg: "User {{ username }} was successfully created."

    - name: Notify error  # Уведомление об ошибке, если задача не удалась
      debug:
        msg: "Failed to create user {{ username }}."
